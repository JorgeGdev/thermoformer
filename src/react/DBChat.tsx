// src/react/DBChat.tsx
import React, { useRef, useEffect, useState } from "react";

interface Message {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date;
  language?: string;
}

const LANGUAGES = {
  en: { name: 'ЁЯЗ║ЁЯЗ╕ English', placeholder: 'Ask about production, pallets, materials, statistics...' },
  es: { name: 'ЁЯЗкЁЯЗ╕ Espa├▒ol', placeholder: 'Pregunta sobre producci├│n, pallets, materiales, estad├нsticas...' },
  fr: { name: 'ЁЯЗлЁЯЗ╖ Fran├зais', placeholder: 'Posez des questions sur la production, palettes, mat├йriaux...' },
  pt: { name: 'ЁЯЗ╡ЁЯЗ╣ Portugu├кs', placeholder: 'Pergunte sobre produ├з├гo, paletes, materiais, estat├нsticas...' },
  pa: { name: 'ЁЯЗоЁЯЗ│ рикрй░риЬри╛римрйА', placeholder: 'риЙридрикри╛рижрии, рикрйИри▓рйЗриЯ, ри╕риорй▒риЧри░рйА римри╛ри░рйЗ рикрйБрй▒риЫрйЛ...' },
  hi: { name: 'ЁЯЗоЁЯЗ│ рд╣рд┐рдиреНрджреА', placeholder: 'рдЙрддреНрдкрд╛рджрди, рдкреИрд▓реЗрдЯ, рд╕рд╛рдордЧреНрд░реА рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдкреВрдЫреЗрдВ...' }
};

const INITIAL_MESSAGES = {
  en: 'Hello! I\'m your intelligent assistant for the Plixies production system. I can help you with real-time information about packets, pallets, production, raw materials and much more. What would you like to know?',
  es: '┬бHola! Soy tu asistente inteligente para el sistema de producci├│n de Plixies. Puedo ayudarte con informaci├│n en tiempo real sobre packets, pallets, producci├│n, materia prima y mucho m├бs. ┬┐Qu├й te gustar├нa saber?',
  fr: 'Bonjour! Je suis votre assistant intelligent pour le syst├иme de production Plixies. Je peux vous aider avec des informations en temps r├йel sur les paquets, palettes, production, mati├иres premi├иres et bien plus. Que souhaitez-vous savoir?',
  pt: 'Ol├б! Sou seu assistente inteligente para o sistema de produ├з├гo da Plixies. Posso ajud├б-lo com informa├з├╡es em tempo real sobre pacotes, paletes, produ├з├гo, mat├йria-prima e muito mais. O que gostaria de saber?',
  pa: 'ри╕рид ри╕рйНри░рйА риЕриХри╛ри▓! риорйИриВ рикри▓ри┐риХри╕рйАриЬри╝ риЙридрикри╛рижрии рикрйНри░ригри╛ри▓рйА ри▓риИ ридрйБри╣ри╛рибри╛ римрйБрй▒ризрйАриори╛рии ри╕ри╣ри╛риЗриХ ри╣ри╛риВред риорйИриВ ридрйБри╣ри╛риирйВрй░ рикрйИриХрйЗриЯ, рикрйИри▓рйЗриЯ, риЙридрикри╛рижрии, риХрй▒риЪрйЗ риори╛ри▓ риЕридрйЗ ри╣рйЛри░ римри╣рйБрид риХрйБриЭ римри╛ри░рйЗ ри░рйАриЕри▓-риЯри╛риИрио риЬри╛ригриХри╛ри░рйА риири╛ри▓ риорижриж риХри░ ри╕риХрижри╛ ри╣ри╛риВред ридрйБри╕рйАриВ риХрйА риЬри╛ригриири╛ риЪри╛ри╣рйБрй░рижрйЗ ри╣рйЛ?',
  hi: 'рдирдорд╕реНрддреЗ! рдореИрдВ рдкреНрд▓рд┐рдХреНрд╕реАрдЬрд╝ рдЙрддреНрдкрд╛рджрди рдкреНрд░рдгрд╛рд▓реА рдХреЗ рд▓рд┐рдП рдЖрдкрдХрд╛ рдмреБрджреНрдзрд┐рдорд╛рди рд╕рд╣рд╛рдпрдХ рд╣реВрдВред рдореИрдВ рдЖрдкрдХреА рдкреИрдХреЗрдЯ, рдкреИрд▓реЗрдЯ, рдЙрддреНрдкрд╛рджрди, рдХрдЪреНрдЪреЗ рдорд╛рд▓ рдФрд░ рдмрд╣реБрдд рдХреБрдЫ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рд░реАрдпрд▓-рдЯрд╛рдЗрдо рдЬрд╛рдирдХрд╛рд░реА рдХреЗ рд╕рд╛рде рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВред рдЖрдк рдХреНрдпрд╛ рдЬрд╛рдирдирд╛ рдЪрд╛рд╣реЗрдВрдЧреЗ?'
};

export default function DBChat() {
  const bottomRef = useRef<HTMLDivElement>(null);
  const [selectedLanguage, setSelectedLanguage] = useState('en'); // Default a ingl├йs
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      role: 'assistant',
      content: INITIAL_MESSAGES[selectedLanguage as keyof typeof INITIAL_MESSAGES],
      timestamp: new Date(),
      language: selectedLanguage
    }
  ]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // Actualizar mensaje inicial cuando cambie el idioma
  useEffect(() => {
    setMessages([{
      id: '1',
      role: 'assistant',
      content: INITIAL_MESSAGES[selectedLanguage as keyof typeof INITIAL_MESSAGES],
      timestamp: new Date(),
      language: selectedLanguage
    }]);
  }, [selectedLanguage]);

  useEffect(() => {
    bottomRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages, isLoading]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!input.trim() || isLoading) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      role: 'user',
      content: input.trim(),
      timestamp: new Date(),
      language: selectedLanguage
    };

    setMessages(prev => [...prev, userMessage]);
    setInput('');
    setIsLoading(true);
    setError(null);

    try {
      const response = await fetch('/api/ai-chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          messages: [...messages, userMessage],
          language: selectedLanguage
        }),
      });

      if (!response.ok) {
        throw new Error(`Error ${response.status}: ${response.statusText}`);
      }

      // Leer el stream
      const reader = response.body?.getReader();
      if (!reader) {
        throw new Error('No se pudo leer la respuesta');
      }

      let assistantContent = '';
      const assistantMessage: Message = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: '',
        timestamp: new Date(),
        language: selectedLanguage
      };

      // Agregar el mensaje vac├нo del asistente
      setMessages(prev => [...prev, assistantMessage]);

      while (true) {
        const { done, value } = await reader.read();
        if (done) break;

        const chunk = new TextDecoder().decode(value);
        const lines = chunk.split('\n');

        for (const line of lines) {
          if (line.startsWith('data: ')) {
            const data = line.slice(6);
            if (data === '[DONE]') continue;

            try {
              const parsed = JSON.parse(data);
              if (parsed.content) {
                assistantContent += parsed.content;
                // Actualizar el mensaje del asistente
                setMessages(prev => 
                  prev.map(msg => 
                    msg.id === assistantMessage.id 
                      ? { ...msg, content: assistantContent }
                      : msg
                  )
                );
              }
            } catch (e) {
              // Ignorar errores de parsing
            }
          }
        }
      }

    } catch (error: any) {
      console.error('Error:', error);
      setError(error.message || 'Ocurri├│ un error al procesar tu consulta');
      
      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: 'Lo siento, ocurri├│ un error al procesar tu consulta. Por favor, intenta de nuevo.',
        timestamp: new Date(),
        language: selectedLanguage
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="max-w-3xl mx-auto bg-slate-900 border border-slate-800 rounded-2xl shadow">
      {/* Selector de idioma */}
      <div className="p-4 border-b border-slate-800 flex justify-between items-center">
        <h2 className="text-slate-100 font-medium">ЁЯдЦ Production AI Assistant</h2>
        <div className="flex items-center space-x-2">
          <select 
            value={selectedLanguage}
            onChange={(e) => setSelectedLanguage(e.target.value)}
            className="px-3 py-1 rounded-lg bg-slate-800 text-slate-100 border border-slate-700 text-sm focus:border-slate-500 outline-none"
          >
            {Object.entries(LANGUAGES).map(([code, lang]) => (
              <option key={code} value={code}>{lang.name}</option>
            ))}
          </select>
        </div>
      </div>

      <div className="p-4 h-[60vh] overflow-y-auto space-y-3">
        {messages.map((message) => (
          <div
            key={message.id}
            className={message.role === "user" ? "text-right" : "text-left"}
          >
            <div
              className={
                "inline-block px-3 py-2 rounded-xl max-w-[80%] " +
                (message.role === "user"
                  ? "bg-blue-600 text-white"
                  : "bg-slate-800 text-slate-100")
              }
            >
              <div className="whitespace-pre-wrap">{message.content}</div>
              {message.role === "assistant" && (
                <div className="text-xs text-slate-400 mt-1 opacity-60 flex items-center space-x-1">
                  <span>ЁЯдЦ Real-time data response</span>
                  {message.language && (
                    <span className="px-1 py-0.5 bg-slate-700 rounded text-xs">
                      {LANGUAGES[message.language as keyof typeof LANGUAGES]?.name.split(' ')[0]}
                    </span>
                  )}
                </div>
              )}
            </div>
          </div>
        ))}
        {isLoading && (
          <div className="text-left">
            <div className="inline-block px-3 py-2 rounded-xl bg-slate-800 text-slate-300">
              <div className="flex items-center space-x-2">
                <div className="animate-spin h-4 w-4 border-2 border-slate-400 border-t-transparent rounded-full"></div>
                <span>
                  {selectedLanguage === 'en' && 'Analyzing database...'}
                  {selectedLanguage === 'es' && 'Analizando base de datos...'}
                  {selectedLanguage === 'fr' && 'Analyse de la base de donn├йes...'}
                  {selectedLanguage === 'pt' && 'Analisando banco de dados...'}
                  {selectedLanguage === 'pa' && 'рибрйЗриЯри╛римрйЗри╕ рижри╛ ри╡ри┐ри╕ри╝ри▓рйЗри╕ри╝риг...'}
                  {selectedLanguage === 'hi' && 'рдбреЗрдЯрд╛рдмреЗрд╕ рдХрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг...'}
                </span>
              </div>
            </div>
          </div>
        )}
        {error && (
          <div className="text-left">
            <div className="inline-block px-3 py-2 rounded-xl bg-red-900/50 text-red-200 border border-red-800/50">
              Error: {error}
            </div>
          </div>
        )}
        <div ref={bottomRef} />
      </div>

      <form onSubmit={handleSubmit} className="p-4 border-t border-slate-800 flex gap-2">
        <input
          className="flex-1 px-3 py-2 rounded-xl bg-slate-800 text-slate-100 outline-none border border-slate-700 focus:border-slate-500"
          placeholder={LANGUAGES[selectedLanguage as keyof typeof LANGUAGES]?.placeholder}
          value={input}
          onChange={(e) => setInput(e.target.value)}
          disabled={isLoading}
        />
        <button
          type="submit"
          disabled={isLoading || !input.trim()}
          className="px-4 py-2 rounded-xl bg-emerald-600 hover:bg-emerald-700 text-white disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
        >
          {isLoading ? "..." : (
            selectedLanguage === 'en' ? 'Send' :
            selectedLanguage === 'es' ? 'Enviar' :
            selectedLanguage === 'fr' ? 'Envoyer' :
            selectedLanguage === 'pt' ? 'Enviar' :
            selectedLanguage === 'pa' ? 'ринрйЗриЬрйЛ' :
            selectedLanguage === 'hi' ? 'рднреЗрдЬреЗрдВ' : 'Send'
          )}
        </button>
      </form>
      
      <div className="px-4 pb-3 text-xs text-slate-500">
        ЁЯТб {
          selectedLanguage === 'en' ? 'Ask about production, pallets, materials, statistics, problems, etc.' :
          selectedLanguage === 'es' ? 'Pregunta sobre producci├│n, pallets, materiales, estad├нsticas, problemas, etc.' :
          selectedLanguage === 'fr' ? 'Posez des questions sur la production, palettes, mat├йriaux, statistiques, probl├иmes, etc.' :
          selectedLanguage === 'pt' ? 'Pergunte sobre produ├з├гo, paletes, materiais, estat├нsticas, problemas, etc.' :
          selectedLanguage === 'pa' ? 'риЙридрикри╛рижрии, рикрйИри▓рйЗриЯ, ри╕риорй▒риЧри░рйА, риЕрй░риХрйЬрйЗ, ри╕риорй▒ри╕ри┐риЖри╡ри╛риВ риЖрижри┐ римри╛ри░рйЗ рикрйБрй▒риЫрйЛред' :
          selectedLanguage === 'hi' ? 'рдЙрддреНрдкрд╛рджрди, рдкреИрд▓реЗрдЯ, рд╕рд╛рдордЧреНрд░реА, рдЖрдВрдХрдбрд╝реЗ, рд╕рдорд╕реНрдпрд╛рдУрдВ рдЖрджрд┐ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдкреВрдЫреЗрдВред' :
          'Ask about production, pallets, materials, statistics, problems, etc.'
        }
      </div>
    </div>
  );
}
